---
name: docker

# Run on push and once a week to keep the images from bitrotting and to
# identify issues while no commits are being pushed.
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: "52 2 * * 0"

# Cancel old PR builds when pushing new commits.
concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        image:
          - alpine-s390x
          - bazel
          - compcert
          - doxygen
          - flutter-web
          - frama-c
          - freebsd
          - haskell
          - pkgsrc
        include:
          - image: bazel
            has_base: true
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build base image
        if: ${{ matrix.has_base }}
        run: |
          cd ${{ matrix.image }} && ./build.sh
      - name: Build and push (with base image)
        if: ${{ matrix.has_base }}
        uses: docker/build-push-action@v6
        with:
          context: "${{ matrix.image }}"
          build-contexts: "base=oci-layout://${{ matrix.image }}/layers:base"
          tags: toxchat/${{ matrix.image }}:latest
          cache-from: type=registry,ref=toxchat/${{ matrix.image }}:latest
          cache-to: type=inline
          push: ${{ github.event_name == 'push' }}
      - name: Build and push
        if: ${{ !matrix.has_base }}
        uses: docker/build-push-action@v6
        with:
          context: "${{ matrix.image }}"
          tags: toxchat/${{ matrix.image }}:latest
          cache-from: type=registry,ref=toxchat/${{ matrix.image }}:latest
          cache-to: type=inline
          push: ${{ github.event_name == 'push' }}

  buildfarm:
    strategy:
      matrix:
        image: [server, worker]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:buildfarm"
          file: ${{ matrix.image }}.Dockerfile
          tags: toxchat/buildfarm-${{ matrix.image }}:latest
          cache-from: type=registry,ref=toxchat/buildfarm-${{ matrix.image }}:latest
          cache-to: type=inline
          push: ${{ github.event_name == 'push' }}

  qtox:
    strategy:
      fail-fast: false
      matrix:
        image:
          - alpine
          - android-builder.armeabi-v7a.debug
          - android-builder.armeabi-v7a.release
          - android-builder.arm64-v8a.debug
          - android-builder.arm64-v8a.release
          - debian
          - fedora
          - flatpak-builder
          - ubuntu-lts
          - windows-builder.i686
          - windows-builder.x86_64
        include:
          - image: windows-builder.i686
            file: windows-builder
            args: |
              ARCH=i686
              WINEARCH=win32
          - image: windows-builder.x86_64
            file: windows-builder
            args: |
              ARCH=x86_64
              WINEARCH=win64
          - image: android-builder.armeabi-v7a.debug
            file: android-builder
            args: |
              ANDROID_FFMPEG_ABI=armv7a
              ANDROID_OPENSSL_ABI=arm
              ANDROID_OPENSSL_ASM=-no-asm
              ANDROID_QT_ABI=armeabi-v7a
              ANDROID_TRIPLE=armv7a-linux-androideabi
              ANDROID_VPX_ABI=armv7-android-gcc
              QT_BUILD_TYPE=debug
          - image: android-builder.armeabi-v7a.release
            file: android-builder
            args: |
              ANDROID_FFMPEG_ABI=armv7a
              ANDROID_OPENSSL_ABI=arm
              ANDROID_OPENSSL_ASM=-no-asm
              ANDROID_QT_ABI=armeabi-v7a
              ANDROID_TRIPLE=armv7a-linux-androideabi
              ANDROID_VPX_ABI=armv7-android-gcc
              QT_BUILD_TYPE=release
          - image: android-builder.arm64-v8a.debug
            file: android-builder
            args: |
              ANDROID_FFMPEG_ABI=arm64
              ANDROID_OPENSSL_ABI=arm64
              ANDROID_OPENSSL_ASM=
              ANDROID_QT_ABI=arm64-v8a
              ANDROID_TRIPLE=aarch64-linux-android
              ANDROID_VPX_ABI=arm64-android-gcc
              QT_BUILD_TYPE=debug
          - image: android-builder.arm64-v8a.release
            file: android-builder
            args: |
              ANDROID_FFMPEG_ABI=arm64
              ANDROID_OPENSSL_ABI=arm64
              ANDROID_OPENSSL_ASM=
              ANDROID_QT_ABI=arm64-v8a
              ANDROID_TRIPLE=aarch64-linux-android
              ANDROID_VPX_ABI=arm64-android-gcc
              QT_BUILD_TYPE=release
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:qtox"
          file: "docker/Dockerfile.${{ matrix.file || matrix.image }}"
          build-args: ${{ matrix.args }}
          tags: toxchat/qtox:${{ matrix.image }}
          cache-from: type=registry,ref=toxchat/qtox:${{ matrix.image }}
          cache-to: type=inline
          push: ${{ github.event_name == 'push' }}
